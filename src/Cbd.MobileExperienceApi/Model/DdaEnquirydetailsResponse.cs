/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// DdaEnquirydetailsResponse
    /// </summary>
    [DataContract(Name = "dda-enquirydetails-response")]
    public partial class DdaEnquirydetailsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DdaEnquirydetailsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DdaEnquirydetailsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DdaEnquirydetailsResponse" /> class.
        /// </summary>
        /// <param name="referenceNo">referenceNo.</param>
        /// <param name="enquiryMode">enquiryMode.</param>
        /// <param name="source">source.</param>
        /// <param name="data">data (required).</param>
        /// <param name="errors">errors (required).</param>
        public DdaEnquirydetailsResponse(string referenceNo = default(string), string enquiryMode = default(string), string source = default(string), List<DdaEnquirydetailsResponseDataInner> data = default(List<DdaEnquirydetailsResponseDataInner>), List<DdaEnquirydetailsResponseErrorsInner> errors = default(List<DdaEnquirydetailsResponseErrorsInner>))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for DdaEnquirydetailsResponse and cannot be null");
            }
            this.Data = data;
            // to ensure "errors" is required (not null)
            if (errors == null)
            {
                throw new ArgumentNullException("errors is a required property for DdaEnquirydetailsResponse and cannot be null");
            }
            this.Errors = errors;
            this.ReferenceNo = referenceNo;
            this.EnquiryMode = enquiryMode;
            this.Source = source;
        }

        /// <summary>
        /// Gets or Sets ReferenceNo
        /// </summary>
        [DataMember(Name = "ReferenceNo", EmitDefaultValue = false)]
        public string ReferenceNo { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryMode
        /// </summary>
        [DataMember(Name = "EnquiryMode", EmitDefaultValue = false)]
        public string EnquiryMode { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "Data", IsRequired = true, EmitDefaultValue = true)]
        public List<DdaEnquirydetailsResponseDataInner> Data { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = true)]
        public List<DdaEnquirydetailsResponseErrorsInner> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DdaEnquirydetailsResponse {\n");
            sb.Append("  ReferenceNo: ").Append(ReferenceNo).Append("\n");
            sb.Append("  EnquiryMode: ").Append(EnquiryMode).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
