/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc
    /// </summary>
    [DataContract(Name = "RemitAdd_response_RemitAddRs_RemitRec_RemitInfo_FeeChargeAlloc")]
    public partial class RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc" /> class.
        /// </summary>
        /// <param name="chargeRegulation">chargeRegulation (required).</param>
        /// <param name="fee">fee.</param>
        /// <param name="segmentCode">segmentCode (required).</param>
        public RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc(string chargeRegulation = default(string), RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee fee = default(RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee), string segmentCode = default(string))
        {
            // to ensure "chargeRegulation" is required (not null)
            if (chargeRegulation == null)
            {
                throw new ArgumentNullException("chargeRegulation is a required property for RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc and cannot be null");
            }
            this.ChargeRegulation = chargeRegulation;
            // to ensure "segmentCode" is required (not null)
            if (segmentCode == null)
            {
                throw new ArgumentNullException("segmentCode is a required property for RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc and cannot be null");
            }
            this.SegmentCode = segmentCode;
            this.Fee = fee;
        }

        /// <summary>
        /// Gets or Sets ChargeRegulation
        /// </summary>
        [DataMember(Name = "ChargeRegulation", IsRequired = true, EmitDefaultValue = true)]
        public string ChargeRegulation { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "Fee", EmitDefaultValue = false)]
        public RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee Fee { get; set; }

        /// <summary>
        /// Gets or Sets SegmentCode
        /// </summary>
        [DataMember(Name = "SegmentCode", IsRequired = true, EmitDefaultValue = true)]
        public string SegmentCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAlloc {\n");
            sb.Append("  ChargeRegulation: ").Append(ChargeRegulation).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  SegmentCode: ").Append(SegmentCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChargeRegulation (string) maxLength
            if (this.ChargeRegulation != null && this.ChargeRegulation.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ChargeRegulation, length must be less than 1024.", new [] { "ChargeRegulation" });
            }

            // SegmentCode (string) maxLength
            if (this.SegmentCode != null && this.SegmentCode.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for SegmentCode, length must be less than 1024.", new [] { "SegmentCode" });
            }

            yield break;
        }
    }

}
