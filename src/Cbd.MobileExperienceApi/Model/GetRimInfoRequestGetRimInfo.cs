/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// GetRimInfoRequestGetRimInfo
    /// </summary>
    [DataContract(Name = "GetRimInfo_request_getRimInfo")]
    public partial class GetRimInfoRequestGetRimInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRimInfoRequestGetRimInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetRimInfoRequestGetRimInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRimInfoRequestGetRimInfo" /> class.
        /// </summary>
        /// <param name="rimNo">rimNo (required).</param>
        /// <param name="channelId">channelId (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="funcId">funcId (required).</param>
        public GetRimInfoRequestGetRimInfo(string rimNo = default(string), int channelId = default(int), int userId = default(int), int funcId = default(int))
        {
            // to ensure "rimNo" is required (not null)
            if (rimNo == null)
            {
                throw new ArgumentNullException("rimNo is a required property for GetRimInfoRequestGetRimInfo and cannot be null");
            }
            this.RimNo = rimNo;
            this.ChannelId = channelId;
            this.UserId = userId;
            this.FuncId = funcId;
        }

        /// <summary>
        /// Gets or Sets RimNo
        /// </summary>
        [DataMember(Name = "RimNo", IsRequired = true, EmitDefaultValue = true)]
        public string RimNo { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = true)]
        public int ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets FuncId
        /// </summary>
        [DataMember(Name = "funcId", IsRequired = true, EmitDefaultValue = true)]
        public int FuncId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetRimInfoRequestGetRimInfo {\n");
            sb.Append("  RimNo: ").Append(RimNo).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FuncId: ").Append(FuncId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RimNo (string) maxLength
            if (this.RimNo != null && this.RimNo.Length > 10)
            {
                yield return new ValidationResult("Invalid value for RimNo, length must be less than 10.", new [] { "RimNo" });
            }

            // RimNo (string) minLength
            if (this.RimNo != null && this.RimNo.Length < 1)
            {
                yield return new ValidationResult("Invalid value for RimNo, length must be greater than 1.", new [] { "RimNo" });
            }

            if (this.RimNo != null) {
                // RimNo (string) pattern
                Regex regexRimNo = new Regex(@"^[0-9]*$", RegexOptions.CultureInvariant);
                if (!regexRimNo.Match(this.RimNo).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RimNo, must match a pattern of " + regexRimNo, new [] { "RimNo" });
                }
            }

            yield break;
        }
    }

}
