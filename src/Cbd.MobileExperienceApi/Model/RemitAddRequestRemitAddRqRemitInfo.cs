/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// RemitAddRequestRemitAddRqRemitInfo
    /// </summary>
    [DataContract(Name = "RemitAdd_request_RemitAddRq_RemitInfo")]
    public partial class RemitAddRequestRemitAddRqRemitInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddRequestRemitAddRqRemitInfo" /> class.
        /// </summary>
        /// <param name="remitRefIdent">remitRefIdent.</param>
        /// <param name="remitType">remitType.</param>
        /// <param name="remitReceiverBankRef">remitReceiverBankRef.</param>
        /// <param name="pmtInstruction">pmtInstruction.</param>
        /// <param name="swiftConnectInfo">swiftConnectInfo.</param>
        /// <param name="custPayeeRef">custPayeeRef.</param>
        /// <param name="curAmt">curAmt.</param>
        /// <param name="origCurAmt">origCurAmt.</param>
        /// <param name="dueDt">dueDt.</param>
        /// <param name="effDt">effDt.</param>
        /// <param name="valueDt">valueDt.</param>
        /// <param name="expediteInd">expediteInd.</param>
        /// <param name="reversalInd">reversalInd.</param>
        /// <param name="debitInd">debitInd.</param>
        /// <param name="inOutFlag">inOutFlag.</param>
        /// <param name="forExDealRef">forExDealRef.</param>
        /// <param name="remitPurposeCode">remitPurposeCode.</param>
        /// <param name="remitPurposeDesc">remitPurposeDesc.</param>
        /// <param name="incomeSourceCode">incomeSourceCode.</param>
        /// <param name="incomeSourceDesc">incomeSourceDesc.</param>
        /// <param name="refData">refData.</param>
        /// <param name="instructedCurrency">instructedCurrency.</param>
        /// <param name="instructedAmount">instructedAmount.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        public RemitAddRequestRemitAddRqRemitInfo(Object remitRefIdent = default(Object), Object remitType = default(Object), RemitAddRequestRemitAddRqRemitInfoRemitReceiverBankRef remitReceiverBankRef = default(RemitAddRequestRemitAddRqRemitInfoRemitReceiverBankRef), RemitAddRequestRemitAddRqRemitInfoPmtInstruction pmtInstruction = default(RemitAddRequestRemitAddRqRemitInfoPmtInstruction), Object swiftConnectInfo = default(Object), RemitAddRequestRemitAddRqRemitInfoCustPayeeRef custPayeeRef = default(RemitAddRequestRemitAddRqRemitInfoCustPayeeRef), RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt curAmt = default(RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt), RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt origCurAmt = default(RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt), DateOnly dueDt = default(DateOnly), DateOnly effDt = default(DateOnly), DateOnly valueDt = default(DateOnly), bool expediteInd = default(bool), bool reversalInd = default(bool), bool debitInd = default(bool), Object inOutFlag = default(Object), RemitAddRequestRemitAddRqRemitInfoForExDealRef forExDealRef = default(RemitAddRequestRemitAddRqRemitInfoForExDealRef), Object remitPurposeCode = default(Object), Object remitPurposeDesc = default(Object), Object incomeSourceCode = default(Object), Object incomeSourceDesc = default(Object), List<RemitAddRequestRemitAddRqRemitInfoRefDataInner> refData = default(List<RemitAddRequestRemitAddRqRemitInfoRefDataInner>), Object instructedCurrency = default(Object), Object instructedAmount = default(Object), Object exchangeRate = default(Object))
        {
            this.RemitRefIdent = remitRefIdent;
            this.RemitType = remitType;
            this.RemitReceiverBankRef = remitReceiverBankRef;
            this.PmtInstruction = pmtInstruction;
            this.SwiftConnectInfo = swiftConnectInfo;
            this.CustPayeeRef = custPayeeRef;
            this.CurAmt = curAmt;
            this.OrigCurAmt = origCurAmt;
            this.DueDt = dueDt;
            this.EffDt = effDt;
            this.ValueDt = valueDt;
            this.ExpediteInd = expediteInd;
            this.ReversalInd = reversalInd;
            this.DebitInd = debitInd;
            this.InOutFlag = inOutFlag;
            this.ForExDealRef = forExDealRef;
            this.RemitPurposeCode = remitPurposeCode;
            this.RemitPurposeDesc = remitPurposeDesc;
            this.IncomeSourceCode = incomeSourceCode;
            this.IncomeSourceDesc = incomeSourceDesc;
            this.RefData = refData;
            this.InstructedCurrency = instructedCurrency;
            this.InstructedAmount = instructedAmount;
            this.ExchangeRate = exchangeRate;
        }

        /// <summary>
        /// Gets or Sets RemitRefIdent
        /// </summary>
        [DataMember(Name = "RemitRefIdent", EmitDefaultValue = false)]
        public Object RemitRefIdent { get; set; }

        /// <summary>
        /// Gets or Sets RemitType
        /// </summary>
        [DataMember(Name = "RemitType", EmitDefaultValue = false)]
        public Object RemitType { get; set; }

        /// <summary>
        /// Gets or Sets RemitReceiverBankRef
        /// </summary>
        [DataMember(Name = "RemitReceiverBankRef", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoRemitReceiverBankRef RemitReceiverBankRef { get; set; }

        /// <summary>
        /// Gets or Sets PmtInstruction
        /// </summary>
        [DataMember(Name = "PmtInstruction", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoPmtInstruction PmtInstruction { get; set; }

        /// <summary>
        /// Gets or Sets SwiftConnectInfo
        /// </summary>
        [DataMember(Name = "SwiftConnectInfo", EmitDefaultValue = false)]
        public Object SwiftConnectInfo { get; set; }

        /// <summary>
        /// Gets or Sets CustPayeeRef
        /// </summary>
        [DataMember(Name = "CustPayeeRef", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoCustPayeeRef CustPayeeRef { get; set; }

        /// <summary>
        /// Gets or Sets CurAmt
        /// </summary>
        [DataMember(Name = "CurAmt", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt CurAmt { get; set; }

        /// <summary>
        /// Gets or Sets OrigCurAmt
        /// </summary>
        [DataMember(Name = "OrigCurAmt", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoPmtInstructionFeeChargeAllocFeeInnerCurAmt OrigCurAmt { get; set; }

        /// <summary>
        /// Gets or Sets DueDt
        /// </summary>
        [DataMember(Name = "DueDt", EmitDefaultValue = false)]
        public DateOnly DueDt { get; set; }

        /// <summary>
        /// Gets or Sets EffDt
        /// </summary>
        [DataMember(Name = "EffDt", EmitDefaultValue = false)]
        public DateOnly EffDt { get; set; }

        /// <summary>
        /// Gets or Sets ValueDt
        /// </summary>
        [DataMember(Name = "ValueDt", EmitDefaultValue = false)]
        public DateOnly ValueDt { get; set; }

        /// <summary>
        /// Gets or Sets ExpediteInd
        /// </summary>
        [DataMember(Name = "ExpediteInd", EmitDefaultValue = true)]
        public bool ExpediteInd { get; set; }

        /// <summary>
        /// Gets or Sets ReversalInd
        /// </summary>
        [DataMember(Name = "ReversalInd", EmitDefaultValue = true)]
        public bool ReversalInd { get; set; }

        /// <summary>
        /// Gets or Sets DebitInd
        /// </summary>
        [DataMember(Name = "DebitInd", EmitDefaultValue = true)]
        public bool DebitInd { get; set; }

        /// <summary>
        /// Gets or Sets InOutFlag
        /// </summary>
        [DataMember(Name = "InOutFlag", EmitDefaultValue = false)]
        public Object InOutFlag { get; set; }

        /// <summary>
        /// Gets or Sets ForExDealRef
        /// </summary>
        [DataMember(Name = "ForExDealRef", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoForExDealRef ForExDealRef { get; set; }

        /// <summary>
        /// Gets or Sets RemitPurposeCode
        /// </summary>
        [DataMember(Name = "RemitPurposeCode", EmitDefaultValue = false)]
        public Object RemitPurposeCode { get; set; }

        /// <summary>
        /// Gets or Sets RemitPurposeDesc
        /// </summary>
        [DataMember(Name = "RemitPurposeDesc", EmitDefaultValue = false)]
        public Object RemitPurposeDesc { get; set; }

        /// <summary>
        /// Gets or Sets IncomeSourceCode
        /// </summary>
        [DataMember(Name = "IncomeSourceCode", EmitDefaultValue = false)]
        public Object IncomeSourceCode { get; set; }

        /// <summary>
        /// Gets or Sets IncomeSourceDesc
        /// </summary>
        [DataMember(Name = "IncomeSourceDesc", EmitDefaultValue = false)]
        public Object IncomeSourceDesc { get; set; }

        /// <summary>
        /// Gets or Sets RefData
        /// </summary>
        [DataMember(Name = "RefData", EmitDefaultValue = false)]
        public List<RemitAddRequestRemitAddRqRemitInfoRefDataInner> RefData { get; set; }

        /// <summary>
        /// Gets or Sets InstructedCurrency
        /// </summary>
        [DataMember(Name = "instructedCurrency", EmitDefaultValue = false)]
        public Object InstructedCurrency { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "instructedAmount", EmitDefaultValue = false)]
        public Object InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name = "exchangeRate", EmitDefaultValue = false)]
        public Object ExchangeRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemitAddRequestRemitAddRqRemitInfo {\n");
            sb.Append("  RemitRefIdent: ").Append(RemitRefIdent).Append("\n");
            sb.Append("  RemitType: ").Append(RemitType).Append("\n");
            sb.Append("  RemitReceiverBankRef: ").Append(RemitReceiverBankRef).Append("\n");
            sb.Append("  PmtInstruction: ").Append(PmtInstruction).Append("\n");
            sb.Append("  SwiftConnectInfo: ").Append(SwiftConnectInfo).Append("\n");
            sb.Append("  CustPayeeRef: ").Append(CustPayeeRef).Append("\n");
            sb.Append("  CurAmt: ").Append(CurAmt).Append("\n");
            sb.Append("  OrigCurAmt: ").Append(OrigCurAmt).Append("\n");
            sb.Append("  DueDt: ").Append(DueDt).Append("\n");
            sb.Append("  EffDt: ").Append(EffDt).Append("\n");
            sb.Append("  ValueDt: ").Append(ValueDt).Append("\n");
            sb.Append("  ExpediteInd: ").Append(ExpediteInd).Append("\n");
            sb.Append("  ReversalInd: ").Append(ReversalInd).Append("\n");
            sb.Append("  DebitInd: ").Append(DebitInd).Append("\n");
            sb.Append("  InOutFlag: ").Append(InOutFlag).Append("\n");
            sb.Append("  ForExDealRef: ").Append(ForExDealRef).Append("\n");
            sb.Append("  RemitPurposeCode: ").Append(RemitPurposeCode).Append("\n");
            sb.Append("  RemitPurposeDesc: ").Append(RemitPurposeDesc).Append("\n");
            sb.Append("  IncomeSourceCode: ").Append(IncomeSourceCode).Append("\n");
            sb.Append("  IncomeSourceDesc: ").Append(IncomeSourceDesc).Append("\n");
            sb.Append("  RefData: ").Append(RefData).Append("\n");
            sb.Append("  InstructedCurrency: ").Append(InstructedCurrency).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
