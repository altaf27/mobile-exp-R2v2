/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// PartacctrelrsNumInstsType
    /// </summary>
    [DataContract(Name = "partacctrelrs_NumInsts_Type")]
    public partial class PartacctrelrsNumInstsType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartacctrelrsNumInstsType" /> class.
        /// </summary>
        /// <param name="nextInstAmt">nextInstAmt.</param>
        /// <param name="nextInstDt">nextInstDt.</param>
        /// <param name="lastDueAmt">lastDueAmt.</param>
        /// <param name="lastDueDt">lastDueDt.</param>
        /// <param name="totalPmtCount">totalPmtCount.</param>
        /// <param name="remainingPmtCount">remainingPmtCount.</param>
        public PartacctrelrsNumInstsType(PartacctrelrsIntRateDataType nextInstAmt = default(PartacctrelrsIntRateDataType), DateOnly nextInstDt = default(DateOnly), PartacctrelrsIntRateDataType lastDueAmt = default(PartacctrelrsIntRateDataType), DateOnly lastDueDt = default(DateOnly), string totalPmtCount = default(string), string remainingPmtCount = default(string))
        {
            this.NextInstAmt = nextInstAmt;
            this.NextInstDt = nextInstDt;
            this.LastDueAmt = lastDueAmt;
            this.LastDueDt = lastDueDt;
            this.TotalPmtCount = totalPmtCount;
            this.RemainingPmtCount = remainingPmtCount;
        }

        /// <summary>
        /// Gets or Sets NextInstAmt
        /// </summary>
        [DataMember(Name = "NextInstAmt", EmitDefaultValue = false)]
        public PartacctrelrsIntRateDataType NextInstAmt { get; set; }

        /// <summary>
        /// Gets or Sets NextInstDt
        /// </summary>
        [DataMember(Name = "NextInstDt", EmitDefaultValue = false)]
        public DateOnly NextInstDt { get; set; }

        /// <summary>
        /// Gets or Sets LastDueAmt
        /// </summary>
        [DataMember(Name = "LastDueAmt", EmitDefaultValue = false)]
        public PartacctrelrsIntRateDataType LastDueAmt { get; set; }

        /// <summary>
        /// Gets or Sets LastDueDt
        /// </summary>
        [DataMember(Name = "LastDueDt", EmitDefaultValue = false)]
        public DateOnly LastDueDt { get; set; }

        /// <summary>
        /// Gets or Sets TotalPmtCount
        /// </summary>
        [DataMember(Name = "TotalPmtCount", EmitDefaultValue = false)]
        public string TotalPmtCount { get; set; }

        /// <summary>
        /// Gets or Sets RemainingPmtCount
        /// </summary>
        [DataMember(Name = "RemainingPmtCount", EmitDefaultValue = false)]
        public string RemainingPmtCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartacctrelrsNumInstsType {\n");
            sb.Append("  NextInstAmt: ").Append(NextInstAmt).Append("\n");
            sb.Append("  NextInstDt: ").Append(NextInstDt).Append("\n");
            sb.Append("  LastDueAmt: ").Append(LastDueAmt).Append("\n");
            sb.Append("  LastDueDt: ").Append(LastDueDt).Append("\n");
            sb.Append("  TotalPmtCount: ").Append(TotalPmtCount).Append("\n");
            sb.Append("  RemainingPmtCount: ").Append(RemainingPmtCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
