/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// PartyinqrqSvcIdentType
    /// </summary>
    [DataContract(Name = "partyinqrq_SvcIdent_Type")]
    public partial class PartyinqrqSvcIdentType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyinqrqSvcIdentType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PartyinqrqSvcIdentType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyinqrqSvcIdentType" /> class.
        /// </summary>
        /// <param name="svcProviderName">svcProviderName (required).</param>
        /// <param name="svcProviderId">svcProviderId (required).</param>
        /// <param name="svcName">svcName.</param>
        /// <param name="svcId">svcId.</param>
        public PartyinqrqSvcIdentType(string svcProviderName = default(string), string svcProviderId = default(string), string svcName = default(string), string svcId = default(string))
        {
            // to ensure "svcProviderName" is required (not null)
            if (svcProviderName == null)
            {
                throw new ArgumentNullException("svcProviderName is a required property for PartyinqrqSvcIdentType and cannot be null");
            }
            this.SvcProviderName = svcProviderName;
            // to ensure "svcProviderId" is required (not null)
            if (svcProviderId == null)
            {
                throw new ArgumentNullException("svcProviderId is a required property for PartyinqrqSvcIdentType and cannot be null");
            }
            this.SvcProviderId = svcProviderId;
            this.SvcName = svcName;
            this.SvcId = svcId;
        }

        /// <summary>
        /// Gets or Sets SvcProviderName
        /// </summary>
        [DataMember(Name = "SvcProviderName", IsRequired = true, EmitDefaultValue = true)]
        public string SvcProviderName { get; set; }

        /// <summary>
        /// Gets or Sets SvcProviderId
        /// </summary>
        [DataMember(Name = "SvcProviderId", IsRequired = true, EmitDefaultValue = true)]
        public string SvcProviderId { get; set; }

        /// <summary>
        /// Gets or Sets SvcName
        /// </summary>
        [DataMember(Name = "SvcName", EmitDefaultValue = false)]
        public string SvcName { get; set; }

        /// <summary>
        /// Gets or Sets SvcId
        /// </summary>
        [DataMember(Name = "SvcId", EmitDefaultValue = false)]
        public string SvcId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartyinqrqSvcIdentType {\n");
            sb.Append("  SvcProviderName: ").Append(SvcProviderName).Append("\n");
            sb.Append("  SvcProviderId: ").Append(SvcProviderId).Append("\n");
            sb.Append("  SvcName: ").Append(SvcName).Append("\n");
            sb.Append("  SvcId: ").Append(SvcId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
