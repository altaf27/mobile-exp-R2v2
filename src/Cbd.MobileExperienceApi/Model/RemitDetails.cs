/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// RemitDetails
    /// </summary>
    [DataContract(Name = "RemitDetails")]
    public partial class RemitDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemitDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitDetails" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="nickName">nickName.</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="emailAdd">emailAdd.</param>
        /// <param name="country">country.</param>
        /// <param name="transferType">transferType.</param>
        /// <param name="transferSubType">transferSubType.</param>
        /// <param name="kycIdType">kycIdType.</param>
        /// <param name="kycIdNumber">kycIdNumber.</param>
        /// <param name="rim">rim.</param>
        /// <param name="dialerCode">dialerCode.</param>
        /// <param name="address">address.</param>
        /// <param name="lastTransferAmount">lastTransferAmount.</param>
        /// <param name="lastTransferPurposeDesc">lastTransferPurposeDesc.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="lastTransferCurrency">lastTransferCurrency.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="channel">channel.</param>
        /// <param name="status">status.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="city">city.</param>
        /// <param name="nationality">nationality.</param>
        /// <param name="type">type.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="bankAddress">bankAddress.</param>
        /// <param name="bankBranchCity">bankBranchCity.</param>
        /// <param name="bankCountry">bankCountry.</param>
        /// <param name="bankCountryCode">bankCountryCode.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="swiftBicCode">swiftBicCode.</param>
        /// <param name="remitPurposeCode">remitPurposeCode.</param>
        /// <param name="incomeSourceCode">incomeSourceCode.</param>
        /// <param name="thunesCode">thunesCode.</param>
        /// <param name="sortFedWireCode">sortFedWireCode.</param>
        /// <param name="lastTransferRemarks">lastTransferRemarks.</param>
        /// <param name="createdChannel">createdChannel.</param>
        public RemitDetails(string firstName = default(string), string lastName = default(string), string nickName = default(string), string phone = default(string), string emailAdd = default(string), string country = default(string), string transferType = default(string), string transferSubType = default(string), string kycIdType = default(string), string kycIdNumber = default(string), string rim = default(string), string dialerCode = default(string), string address = default(string), string lastTransferAmount = default(string), string lastTransferPurposeDesc = default(string), string bankCode = default(string), string lastTransferCurrency = default(string), DateTime createdDate = default(DateTime), DateTime modifiedDate = default(DateTime), string channel = default(string), string status = default(string), int id = default(int), string name = default(string), string city = default(string), string nationality = default(string), string type = default(string), string accountNumber = default(string), string bankName = default(string), string bankAddress = default(string), string bankBranchCity = default(string), string bankCountry = default(string), string bankCountryCode = default(string), string middleName = default(string), string swiftBicCode = default(string), string remitPurposeCode = default(string), string incomeSourceCode = default(string), string thunesCode = default(string), string sortFedWireCode = default(string), string lastTransferRemarks = default(string), string createdChannel = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for RemitDetails and cannot be null");
            }
            this.Phone = phone;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RemitDetails and cannot be null");
            }
            this.Name = name;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.NickName = nickName;
            this.EmailAdd = emailAdd;
            this.Country = country;
            this.TransferType = transferType;
            this.TransferSubType = transferSubType;
            this.KycIdType = kycIdType;
            this.KycIdNumber = kycIdNumber;
            this.Rim = rim;
            this.DialerCode = dialerCode;
            this.Address = address;
            this.LastTransferAmount = lastTransferAmount;
            this.LastTransferPurposeDesc = lastTransferPurposeDesc;
            this.BankCode = bankCode;
            this.LastTransferCurrency = lastTransferCurrency;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.Channel = channel;
            this.Status = status;
            this.Id = id;
            this.City = city;
            this.Nationality = nationality;
            this.Type = type;
            this.AccountNumber = accountNumber;
            this.BankName = bankName;
            this.BankAddress = bankAddress;
            this.BankBranchCity = bankBranchCity;
            this.BankCountry = bankCountry;
            this.BankCountryCode = bankCountryCode;
            this.MiddleName = middleName;
            this.SwiftBicCode = swiftBicCode;
            this.RemitPurposeCode = remitPurposeCode;
            this.IncomeSourceCode = incomeSourceCode;
            this.ThunesCode = thunesCode;
            this.SortFedWireCode = sortFedWireCode;
            this.LastTransferRemarks = lastTransferRemarks;
            this.CreatedChannel = createdChannel;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [DataMember(Name = "nickName", EmitDefaultValue = false)]
        public string NickName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets EmailAdd
        /// </summary>
        [DataMember(Name = "emailAdd", EmitDefaultValue = false)]
        public string EmailAdd { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets TransferType
        /// </summary>
        [DataMember(Name = "transferType", EmitDefaultValue = false)]
        public string TransferType { get; set; }

        /// <summary>
        /// Gets or Sets TransferSubType
        /// </summary>
        [DataMember(Name = "transferSubType", EmitDefaultValue = false)]
        public string TransferSubType { get; set; }

        /// <summary>
        /// Gets or Sets KycIdType
        /// </summary>
        [DataMember(Name = "kycIdType", EmitDefaultValue = false)]
        public string KycIdType { get; set; }

        /// <summary>
        /// Gets or Sets KycIdNumber
        /// </summary>
        [DataMember(Name = "kycIdNumber", EmitDefaultValue = false)]
        public string KycIdNumber { get; set; }

        /// <summary>
        /// Gets or Sets Rim
        /// </summary>
        [DataMember(Name = "rim", EmitDefaultValue = false)]
        public string Rim { get; set; }

        /// <summary>
        /// Gets or Sets DialerCode
        /// </summary>
        [DataMember(Name = "dialerCode", EmitDefaultValue = false)]
        public string DialerCode { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets LastTransferAmount
        /// </summary>
        [DataMember(Name = "lastTransferAmount", EmitDefaultValue = false)]
        public string LastTransferAmount { get; set; }

        /// <summary>
        /// Gets or Sets LastTransferPurposeDesc
        /// </summary>
        [DataMember(Name = "lastTransferPurposeDesc", EmitDefaultValue = false)]
        public string LastTransferPurposeDesc { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name = "bankCode", EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets LastTransferCurrency
        /// </summary>
        [DataMember(Name = "lastTransferCurrency", EmitDefaultValue = false)]
        public string LastTransferCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = false)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name = "nationality", EmitDefaultValue = false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankAddress
        /// </summary>
        [DataMember(Name = "bankAddress", EmitDefaultValue = false)]
        public string BankAddress { get; set; }

        /// <summary>
        /// Gets or Sets BankBranchCity
        /// </summary>
        [DataMember(Name = "bankBranchCity", EmitDefaultValue = false)]
        public string BankBranchCity { get; set; }

        /// <summary>
        /// Gets or Sets BankCountry
        /// </summary>
        [DataMember(Name = "bankCountry", EmitDefaultValue = false)]
        public string BankCountry { get; set; }

        /// <summary>
        /// Gets or Sets BankCountryCode
        /// </summary>
        [DataMember(Name = "bankCountryCode", EmitDefaultValue = false)]
        public string BankCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name = "middleName", EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets SwiftBicCode
        /// </summary>
        [DataMember(Name = "swiftBicCode", EmitDefaultValue = false)]
        public string SwiftBicCode { get; set; }

        /// <summary>
        /// Gets or Sets RemitPurposeCode
        /// </summary>
        [DataMember(Name = "remitPurposeCode", EmitDefaultValue = false)]
        public string RemitPurposeCode { get; set; }

        /// <summary>
        /// Gets or Sets IncomeSourceCode
        /// </summary>
        [DataMember(Name = "incomeSourceCode", EmitDefaultValue = false)]
        public string IncomeSourceCode { get; set; }

        /// <summary>
        /// Gets or Sets ThunesCode
        /// </summary>
        [DataMember(Name = "thunesCode", EmitDefaultValue = false)]
        public string ThunesCode { get; set; }

        /// <summary>
        /// Gets or Sets SortFedWireCode
        /// </summary>
        [DataMember(Name = "sortFedWireCode", EmitDefaultValue = false)]
        public string SortFedWireCode { get; set; }

        /// <summary>
        /// Gets or Sets LastTransferRemarks
        /// </summary>
        [DataMember(Name = "lastTransferRemarks", EmitDefaultValue = false)]
        public string LastTransferRemarks { get; set; }

        /// <summary>
        /// Gets or Sets CreatedChannel
        /// </summary>
        [DataMember(Name = "createdChannel", EmitDefaultValue = false)]
        public string CreatedChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemitDetails {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  EmailAdd: ").Append(EmailAdd).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  TransferType: ").Append(TransferType).Append("\n");
            sb.Append("  TransferSubType: ").Append(TransferSubType).Append("\n");
            sb.Append("  KycIdType: ").Append(KycIdType).Append("\n");
            sb.Append("  KycIdNumber: ").Append(KycIdNumber).Append("\n");
            sb.Append("  Rim: ").Append(Rim).Append("\n");
            sb.Append("  DialerCode: ").Append(DialerCode).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  LastTransferAmount: ").Append(LastTransferAmount).Append("\n");
            sb.Append("  LastTransferPurposeDesc: ").Append(LastTransferPurposeDesc).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  LastTransferCurrency: ").Append(LastTransferCurrency).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAddress: ").Append(BankAddress).Append("\n");
            sb.Append("  BankBranchCity: ").Append(BankBranchCity).Append("\n");
            sb.Append("  BankCountry: ").Append(BankCountry).Append("\n");
            sb.Append("  BankCountryCode: ").Append(BankCountryCode).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  SwiftBicCode: ").Append(SwiftBicCode).Append("\n");
            sb.Append("  RemitPurposeCode: ").Append(RemitPurposeCode).Append("\n");
            sb.Append("  IncomeSourceCode: ").Append(IncomeSourceCode).Append("\n");
            sb.Append("  ThunesCode: ").Append(ThunesCode).Append("\n");
            sb.Append("  SortFedWireCode: ").Append(SortFedWireCode).Append("\n");
            sb.Append("  LastTransferRemarks: ").Append(LastTransferRemarks).Append("\n");
            sb.Append("  CreatedChannel: ").Append(CreatedChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.FirstName != null) {
                // FirstName (string) pattern
                Regex regexFirstName = new Regex(@"^[a-zA-Z_ ]{0,50}$", RegexOptions.CultureInvariant);
                if (!regexFirstName.Match(this.FirstName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, must match a pattern of " + regexFirstName, new [] { "FirstName" });
                }
            }

            if (this.LastName != null) {
                // LastName (string) pattern
                Regex regexLastName = new Regex(@"^[a-zA-Z_ ]{0,50}$", RegexOptions.CultureInvariant);
                if (!regexLastName.Match(this.LastName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, must match a pattern of " + regexLastName, new [] { "LastName" });
                }
            }

            yield break;
        }
    }

}
