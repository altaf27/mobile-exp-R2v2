/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// XferAddRequestXferAddRqXferInfoRefData
    /// </summary>
    [DataContract(Name = "XferAdd_request_XferAddRq_XferInfo_RefData")]
    public partial class XferAddRequestXferAddRqXferInfoRefData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XferAddRequestXferAddRqXferInfoRefData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XferAddRequestXferAddRqXferInfoRefData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XferAddRequestXferAddRqXferInfoRefData" /> class.
        /// </summary>
        /// <param name="refIdent">refIdent (required).</param>
        /// <param name="creditRefDesc">creditRefDesc (required).</param>
        /// <param name="debitRefDesc">debitRefDesc (required).</param>
        /// <param name="creditTranCode">creditTranCode.</param>
        /// <param name="debitTranCode">debitTranCode.</param>
        /// <param name="refDesc">refDesc.</param>
        /// <param name="aTMID">aTMID.</param>
        /// <param name="cbdFsInd">cbdFsInd.</param>
        public XferAddRequestXferAddRqXferInfoRefData(string refIdent = default(string), string creditRefDesc = default(string), string debitRefDesc = default(string), string creditTranCode = default(string), string debitTranCode = default(string), string refDesc = default(string), string aTMID = default(string), Object cbdFsInd = default(Object))
        {
            // to ensure "refIdent" is required (not null)
            if (refIdent == null)
            {
                throw new ArgumentNullException("refIdent is a required property for XferAddRequestXferAddRqXferInfoRefData and cannot be null");
            }
            this.RefIdent = refIdent;
            // to ensure "creditRefDesc" is required (not null)
            if (creditRefDesc == null)
            {
                throw new ArgumentNullException("creditRefDesc is a required property for XferAddRequestXferAddRqXferInfoRefData and cannot be null");
            }
            this.CreditRefDesc = creditRefDesc;
            // to ensure "debitRefDesc" is required (not null)
            if (debitRefDesc == null)
            {
                throw new ArgumentNullException("debitRefDesc is a required property for XferAddRequestXferAddRqXferInfoRefData and cannot be null");
            }
            this.DebitRefDesc = debitRefDesc;
            this.CreditTranCode = creditTranCode;
            this.DebitTranCode = debitTranCode;
            this.RefDesc = refDesc;
            this.ATMID = aTMID;
            this.CbdFsInd = cbdFsInd;
        }

        /// <summary>
        /// Gets or Sets RefIdent
        /// </summary>
        [DataMember(Name = "RefIdent", IsRequired = true, EmitDefaultValue = true)]
        public string RefIdent { get; set; }

        /// <summary>
        /// Gets or Sets CreditRefDesc
        /// </summary>
        [DataMember(Name = "CreditRefDesc", IsRequired = true, EmitDefaultValue = true)]
        public string CreditRefDesc { get; set; }

        /// <summary>
        /// Gets or Sets DebitRefDesc
        /// </summary>
        [DataMember(Name = "DebitRefDesc", IsRequired = true, EmitDefaultValue = true)]
        public string DebitRefDesc { get; set; }

        /// <summary>
        /// Gets or Sets CreditTranCode
        /// </summary>
        [DataMember(Name = "CreditTranCode", EmitDefaultValue = false)]
        public string CreditTranCode { get; set; }

        /// <summary>
        /// Gets or Sets DebitTranCode
        /// </summary>
        [DataMember(Name = "DebitTranCode", EmitDefaultValue = false)]
        public string DebitTranCode { get; set; }

        /// <summary>
        /// Gets or Sets RefDesc
        /// </summary>
        [DataMember(Name = "RefDesc", EmitDefaultValue = false)]
        public string RefDesc { get; set; }

        /// <summary>
        /// Gets or Sets ATMID
        /// </summary>
        [DataMember(Name = "ATMID", EmitDefaultValue = false)]
        public string ATMID { get; set; }

        /// <summary>
        /// Gets or Sets CbdFsInd
        /// </summary>
        [DataMember(Name = "CbdFsInd", EmitDefaultValue = false)]
        public Object CbdFsInd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class XferAddRequestXferAddRqXferInfoRefData {\n");
            sb.Append("  RefIdent: ").Append(RefIdent).Append("\n");
            sb.Append("  CreditRefDesc: ").Append(CreditRefDesc).Append("\n");
            sb.Append("  DebitRefDesc: ").Append(DebitRefDesc).Append("\n");
            sb.Append("  CreditTranCode: ").Append(CreditTranCode).Append("\n");
            sb.Append("  DebitTranCode: ").Append(DebitTranCode).Append("\n");
            sb.Append("  RefDesc: ").Append(RefDesc).Append("\n");
            sb.Append("  ATMID: ").Append(ATMID).Append("\n");
            sb.Append("  CbdFsInd: ").Append(CbdFsInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RefIdent (string) maxLength
            if (this.RefIdent != null && this.RefIdent.Length > 200)
            {
                yield return new ValidationResult("Invalid value for RefIdent, length must be less than 200.", new [] { "RefIdent" });
            }

            // CreditRefDesc (string) maxLength
            if (this.CreditRefDesc != null && this.CreditRefDesc.Length > 200)
            {
                yield return new ValidationResult("Invalid value for CreditRefDesc, length must be less than 200.", new [] { "CreditRefDesc" });
            }

            // DebitRefDesc (string) maxLength
            if (this.DebitRefDesc != null && this.DebitRefDesc.Length > 200)
            {
                yield return new ValidationResult("Invalid value for DebitRefDesc, length must be less than 200.", new [] { "DebitRefDesc" });
            }

            // CreditTranCode (string) maxLength
            if (this.CreditTranCode != null && this.CreditTranCode.Length > 200)
            {
                yield return new ValidationResult("Invalid value for CreditTranCode, length must be less than 200.", new [] { "CreditTranCode" });
            }

            // DebitTranCode (string) maxLength
            if (this.DebitTranCode != null && this.DebitTranCode.Length > 200)
            {
                yield return new ValidationResult("Invalid value for DebitTranCode, length must be less than 200.", new [] { "DebitTranCode" });
            }

            // RefDesc (string) maxLength
            if (this.RefDesc != null && this.RefDesc.Length > 200)
            {
                yield return new ValidationResult("Invalid value for RefDesc, length must be less than 200.", new [] { "RefDesc" });
            }

            // ATMID (string) maxLength
            if (this.ATMID != null && this.ATMID.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ATMID, length must be less than 10.", new [] { "ATMID" });
            }

            if (this.ATMID != null) {
                // ATMID (string) pattern
                Regex regexATMID = new Regex(@"^CBD([0-9]{1,7})|SCDM([0-9]{1,6})$", RegexOptions.CultureInvariant);
                if (!regexATMID.Match(this.ATMID).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ATMID, must match a pattern of " + regexATMID, new [] { "ATMID" });
                }
            }

            yield break;
        }
    }

}
