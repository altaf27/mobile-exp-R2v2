/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner
    /// </summary>
    [DataContract(Name = "AcctAcctTrnInq_response_AcctAcctTrnInqRs_AcctTrnRec_inner")]
    public partial class AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner" /> class.
        /// </summary>
        /// <param name="acctTrnInfo">acctTrnInfo.</param>
        /// <param name="acctTrnEnvr">acctTrnEnvr (required).</param>
        public AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner(AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnInfo acctTrnInfo = default(AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnInfo), AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvr acctTrnEnvr = default(AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvr))
        {
            // to ensure "acctTrnEnvr" is required (not null)
            if (acctTrnEnvr == null)
            {
                throw new ArgumentNullException("acctTrnEnvr is a required property for AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner and cannot be null");
            }
            this.AcctTrnEnvr = acctTrnEnvr;
            this.AcctTrnInfo = acctTrnInfo;
        }

        /// <summary>
        /// Gets or Sets AcctTrnInfo
        /// </summary>
        [DataMember(Name = "AcctTrnInfo", EmitDefaultValue = false)]
        public AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnInfo AcctTrnInfo { get; set; }

        /// <summary>
        /// Gets or Sets AcctTrnEnvr
        /// </summary>
        [DataMember(Name = "AcctTrnEnvr", IsRequired = true, EmitDefaultValue = true)]
        public AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvr AcctTrnEnvr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInner {\n");
            sb.Append("  AcctTrnInfo: ").Append(AcctTrnInfo).Append("\n");
            sb.Append("  AcctTrnEnvr: ").Append(AcctTrnEnvr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
