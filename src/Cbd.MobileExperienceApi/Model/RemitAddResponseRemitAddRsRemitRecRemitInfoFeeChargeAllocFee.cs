/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee
    /// </summary>
    [DataContract(Name = "RemitAdd_response_RemitAddRs_RemitRec_RemitInfo_FeeChargeAlloc_Fee")]
    public partial class RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee" /> class.
        /// </summary>
        /// <param name="feeType">feeType (required).</param>
        /// <param name="curAmt">curAmt (required).</param>
        public RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee(string feeType = default(string), RemitAddResponseRemitAddRsRemitRecRemitInfoDebitRefCurAmtInner curAmt = default(RemitAddResponseRemitAddRsRemitRecRemitInfoDebitRefCurAmtInner))
        {
            // to ensure "feeType" is required (not null)
            if (feeType == null)
            {
                throw new ArgumentNullException("feeType is a required property for RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee and cannot be null");
            }
            this.FeeType = feeType;
            // to ensure "curAmt" is required (not null)
            if (curAmt == null)
            {
                throw new ArgumentNullException("curAmt is a required property for RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee and cannot be null");
            }
            this.CurAmt = curAmt;
        }

        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name = "FeeType", IsRequired = true, EmitDefaultValue = true)]
        public string FeeType { get; set; }

        /// <summary>
        /// Gets or Sets CurAmt
        /// </summary>
        [DataMember(Name = "CurAmt", IsRequired = true, EmitDefaultValue = true)]
        public RemitAddResponseRemitAddRsRemitRecRemitInfoDebitRefCurAmtInner CurAmt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemitAddResponseRemitAddRsRemitRecRemitInfoFeeChargeAllocFee {\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  CurAmt: ").Append(CurAmt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FeeType (string) maxLength
            if (this.FeeType != null && this.FeeType.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for FeeType, length must be less than 1024.", new [] { "FeeType" });
            }

            yield break;
        }
    }

}
