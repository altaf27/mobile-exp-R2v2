/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvrAcctKeys
    /// </summary>
    [DataContract(Name = "AcctAcctTrnInq_response_AcctAcctTrnInqRs_AcctTrnRec_inner_AcctTrnEnvr_AcctKeys")]
    public partial class AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvrAcctKeys : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvrAcctKeys" /> class.
        /// </summary>
        /// <param name="acctId">acctId.</param>
        /// <param name="acctTitle">acctTitle.</param>
        /// <param name="acctClass">acctClass.</param>
        /// <param name="acctClassCode">acctClassCode.</param>
        /// <param name="acctType">acctType.</param>
        /// <param name="acctDesc">acctDesc.</param>
        public AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvrAcctKeys(string acctId = default(string), string acctTitle = default(string), string acctClass = default(string), string acctClassCode = default(string), string acctType = default(string), string acctDesc = default(string))
        {
            this.AcctId = acctId;
            this.AcctTitle = acctTitle;
            this.AcctClass = acctClass;
            this.AcctClassCode = acctClassCode;
            this.AcctType = acctType;
            this.AcctDesc = acctDesc;
        }

        /// <summary>
        /// Gets or Sets AcctId
        /// </summary>
        [DataMember(Name = "AcctId", EmitDefaultValue = false)]
        public string AcctId { get; set; }

        /// <summary>
        /// Gets or Sets AcctTitle
        /// </summary>
        [DataMember(Name = "AcctTitle", EmitDefaultValue = false)]
        public string AcctTitle { get; set; }

        /// <summary>
        /// Gets or Sets AcctClass
        /// </summary>
        [DataMember(Name = "AcctClass", EmitDefaultValue = false)]
        public string AcctClass { get; set; }

        /// <summary>
        /// Gets or Sets AcctClassCode
        /// </summary>
        [DataMember(Name = "AcctClassCode", EmitDefaultValue = false)]
        public string AcctClassCode { get; set; }

        /// <summary>
        /// Gets or Sets AcctType
        /// </summary>
        [DataMember(Name = "AcctType", EmitDefaultValue = false)]
        public string AcctType { get; set; }

        /// <summary>
        /// Gets or Sets AcctDesc
        /// </summary>
        [DataMember(Name = "AcctDesc", EmitDefaultValue = false)]
        public string AcctDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AcctAcctTrnInqResponseAcctAcctTrnInqRsAcctTrnRecInnerAcctTrnEnvrAcctKeys {\n");
            sb.Append("  AcctId: ").Append(AcctId).Append("\n");
            sb.Append("  AcctTitle: ").Append(AcctTitle).Append("\n");
            sb.Append("  AcctClass: ").Append(AcctClass).Append("\n");
            sb.Append("  AcctClassCode: ").Append(AcctClassCode).Append("\n");
            sb.Append("  AcctType: ").Append(AcctType).Append("\n");
            sb.Append("  AcctDesc: ").Append(AcctDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
