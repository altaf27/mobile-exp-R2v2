/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// ValidateIbanDetailsResponseDataFtBeneficiaries
    /// </summary>
    [DataContract(Name = "validateIbanDetails_response_data_ftBeneficiaries")]
    public partial class ValidateIbanDetailsResponseDataFtBeneficiaries : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateIbanDetailsResponseDataFtBeneficiaries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidateIbanDetailsResponseDataFtBeneficiaries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateIbanDetailsResponseDataFtBeneficiaries" /> class.
        /// </summary>
        /// <param name="rimNo">rimNo (required).</param>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="statusDesc">statusDesc (required).</param>
        /// <param name="accountNumber">accountNumber (required).</param>
        /// <param name="nickName">nickName (required).</param>
        /// <param name="bankCity">bankCity (required).</param>
        /// <param name="branchCity">branchCity (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="branchName">branchName (required).</param>
        /// <param name="bankCountry">bankCountry (required).</param>
        /// <param name="swiftCode">swiftCode (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="iban">iban (required).</param>
        /// <param name="cardNumber">cardNumber (required).</param>
        /// <param name="maskedAccountNumber">maskedAccountNumber (required).</param>
        /// <param name="beneficiaryType">beneficiaryType (required).</param>
        /// <param name="bankCode">bankCode (required).</param>
        /// <param name="routingNo">routingNo (required).</param>
        /// <param name="bankName">bankName (required).</param>
        /// <param name="beneficiaryName">beneficiaryName (required).</param>
        /// <param name="benebankabaetc">benebankabaetc (required).</param>
        /// <param name="benefType">benefType (required).</param>
        /// <param name="ibanName">ibanName (required).</param>
        public ValidateIbanDetailsResponseDataFtBeneficiaries(Object rimNo = default(Object), Object statusCode = default(Object), Object statusDesc = default(Object), Object accountNumber = default(Object), Object nickName = default(Object), Object bankCity = default(Object), Object branchCity = default(Object), Object firstName = default(Object), Object lastName = default(Object), Object branchName = default(Object), Object bankCountry = default(Object), Object swiftCode = default(Object), Object address = default(Object), Object city = default(Object), Object country = default(Object), Object iban = default(Object), Object cardNumber = default(Object), Object maskedAccountNumber = default(Object), Object beneficiaryType = default(Object), Object bankCode = default(Object), Object routingNo = default(Object), Object bankName = default(Object), Object beneficiaryName = default(Object), Object benebankabaetc = default(Object), Object benefType = default(Object), Object ibanName = default(Object))
        {
            // to ensure "rimNo" is required (not null)
            if (rimNo == null)
            {
                throw new ArgumentNullException("rimNo is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.RimNo = rimNo;
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new ArgumentNullException("statusCode is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.StatusCode = statusCode;
            // to ensure "statusDesc" is required (not null)
            if (statusDesc == null)
            {
                throw new ArgumentNullException("statusDesc is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.StatusDesc = statusDesc;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new ArgumentNullException("accountNumber is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.AccountNumber = accountNumber;
            // to ensure "nickName" is required (not null)
            if (nickName == null)
            {
                throw new ArgumentNullException("nickName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.NickName = nickName;
            // to ensure "bankCity" is required (not null)
            if (bankCity == null)
            {
                throw new ArgumentNullException("bankCity is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BankCity = bankCity;
            // to ensure "branchCity" is required (not null)
            if (branchCity == null)
            {
                throw new ArgumentNullException("branchCity is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BranchCity = branchCity;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "branchName" is required (not null)
            if (branchName == null)
            {
                throw new ArgumentNullException("branchName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BranchName = branchName;
            // to ensure "bankCountry" is required (not null)
            if (bankCountry == null)
            {
                throw new ArgumentNullException("bankCountry is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BankCountry = bankCountry;
            // to ensure "swiftCode" is required (not null)
            if (swiftCode == null)
            {
                throw new ArgumentNullException("swiftCode is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.SwiftCode = swiftCode;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.Address = address;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.City = city;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.Country = country;
            // to ensure "iban" is required (not null)
            if (iban == null)
            {
                throw new ArgumentNullException("iban is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.Iban = iban;
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.CardNumber = cardNumber;
            // to ensure "maskedAccountNumber" is required (not null)
            if (maskedAccountNumber == null)
            {
                throw new ArgumentNullException("maskedAccountNumber is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.MaskedAccountNumber = maskedAccountNumber;
            // to ensure "beneficiaryType" is required (not null)
            if (beneficiaryType == null)
            {
                throw new ArgumentNullException("beneficiaryType is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BeneficiaryType = beneficiaryType;
            // to ensure "bankCode" is required (not null)
            if (bankCode == null)
            {
                throw new ArgumentNullException("bankCode is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BankCode = bankCode;
            // to ensure "routingNo" is required (not null)
            if (routingNo == null)
            {
                throw new ArgumentNullException("routingNo is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.RoutingNo = routingNo;
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new ArgumentNullException("bankName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BankName = bankName;
            // to ensure "beneficiaryName" is required (not null)
            if (beneficiaryName == null)
            {
                throw new ArgumentNullException("beneficiaryName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BeneficiaryName = beneficiaryName;
            // to ensure "benebankabaetc" is required (not null)
            if (benebankabaetc == null)
            {
                throw new ArgumentNullException("benebankabaetc is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.Benebankabaetc = benebankabaetc;
            // to ensure "benefType" is required (not null)
            if (benefType == null)
            {
                throw new ArgumentNullException("benefType is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.BenefType = benefType;
            // to ensure "ibanName" is required (not null)
            if (ibanName == null)
            {
                throw new ArgumentNullException("ibanName is a required property for ValidateIbanDetailsResponseDataFtBeneficiaries and cannot be null");
            }
            this.IbanName = ibanName;
        }

        /// <summary>
        /// Gets or Sets RimNo
        /// </summary>
        [DataMember(Name = "rimNo", IsRequired = true, EmitDefaultValue = true)]
        public Object RimNo { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = true)]
        public Object StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusDesc
        /// </summary>
        [DataMember(Name = "statusDesc", IsRequired = true, EmitDefaultValue = true)]
        public Object StatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", IsRequired = true, EmitDefaultValue = true)]
        public Object AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [DataMember(Name = "nickName", IsRequired = true, EmitDefaultValue = true)]
        public Object NickName { get; set; }

        /// <summary>
        /// Gets or Sets BankCity
        /// </summary>
        [DataMember(Name = "bankCity", IsRequired = true, EmitDefaultValue = true)]
        public Object BankCity { get; set; }

        /// <summary>
        /// Gets or Sets BranchCity
        /// </summary>
        [DataMember(Name = "branchCity", IsRequired = true, EmitDefaultValue = true)]
        public Object BranchCity { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public Object FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public Object LastName { get; set; }

        /// <summary>
        /// Gets or Sets BranchName
        /// </summary>
        [DataMember(Name = "branchName", IsRequired = true, EmitDefaultValue = true)]
        public Object BranchName { get; set; }

        /// <summary>
        /// Gets or Sets BankCountry
        /// </summary>
        [DataMember(Name = "bankCountry", IsRequired = true, EmitDefaultValue = true)]
        public Object BankCountry { get; set; }

        /// <summary>
        /// Gets or Sets SwiftCode
        /// </summary>
        [DataMember(Name = "swiftCode", IsRequired = true, EmitDefaultValue = true)]
        public Object SwiftCode { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public Object Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public Object City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public Object Country { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", IsRequired = true, EmitDefaultValue = true)]
        public Object Iban { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", IsRequired = true, EmitDefaultValue = true)]
        public Object CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets MaskedAccountNumber
        /// </summary>
        [DataMember(Name = "maskedAccountNumber", IsRequired = true, EmitDefaultValue = true)]
        public Object MaskedAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryType
        /// </summary>
        [DataMember(Name = "beneficiaryType", IsRequired = true, EmitDefaultValue = true)]
        public Object BeneficiaryType { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name = "bankCode", IsRequired = true, EmitDefaultValue = true)]
        public Object BankCode { get; set; }

        /// <summary>
        /// Gets or Sets RoutingNo
        /// </summary>
        [DataMember(Name = "routingNo", IsRequired = true, EmitDefaultValue = true)]
        public Object RoutingNo { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", IsRequired = true, EmitDefaultValue = true)]
        public Object BankName { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryName
        /// </summary>
        [DataMember(Name = "beneficiaryName", IsRequired = true, EmitDefaultValue = true)]
        public Object BeneficiaryName { get; set; }

        /// <summary>
        /// Gets or Sets Benebankabaetc
        /// </summary>
        [DataMember(Name = "benebankabaetc", IsRequired = true, EmitDefaultValue = true)]
        public Object Benebankabaetc { get; set; }

        /// <summary>
        /// Gets or Sets BenefType
        /// </summary>
        [DataMember(Name = "benefType", IsRequired = true, EmitDefaultValue = true)]
        public Object BenefType { get; set; }

        /// <summary>
        /// Gets or Sets IbanName
        /// </summary>
        [DataMember(Name = "ibanName", IsRequired = true, EmitDefaultValue = true)]
        public Object IbanName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateIbanDetailsResponseDataFtBeneficiaries {\n");
            sb.Append("  RimNo: ").Append(RimNo).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  BankCity: ").Append(BankCity).Append("\n");
            sb.Append("  BranchCity: ").Append(BranchCity).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  BankCountry: ").Append(BankCountry).Append("\n");
            sb.Append("  SwiftCode: ").Append(SwiftCode).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  MaskedAccountNumber: ").Append(MaskedAccountNumber).Append("\n");
            sb.Append("  BeneficiaryType: ").Append(BeneficiaryType).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  RoutingNo: ").Append(RoutingNo).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BeneficiaryName: ").Append(BeneficiaryName).Append("\n");
            sb.Append("  Benebankabaetc: ").Append(Benebankabaetc).Append("\n");
            sb.Append("  BenefType: ").Append(BenefType).Append("\n");
            sb.Append("  IbanName: ").Append(IbanName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
