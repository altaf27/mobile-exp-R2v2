/*
 * exp-openfinance-api
 *
 * Ex  perience API for OpenFinance
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Cbd.MobileExperienceApi.Client.FileParameter;
using OpenAPIDateConverter = Cbd.MobileExperienceApi.Client.OpenAPIDateConverter;

namespace Cbd.MobileExperienceApi.Model
{
    /// <summary>
    /// RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInner
    /// </summary>
    [DataContract(Name = "RemitAdd_request_RemitAddRq_RemitInfo_ForExDealRef_ForExDealInfo_ForExQuoteRef_ForExQuoteInfo_inner")]
    public partial class RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInner" /> class.
        /// </summary>
        /// <param name="buySellIndicator">buySellIndicator.</param>
        /// <param name="baseCurCode">baseCurCode.</param>
        /// <param name="baseCurAmt">baseCurAmt.</param>
        /// <param name="contraCurAmt">contraCurAmt.</param>
        public RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInner(Object buySellIndicator = default(Object), RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInnerBaseCurCode baseCurCode = default(RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInnerBaseCurCode), double baseCurAmt = default(double), double contraCurAmt = default(double))
        {
            this.BuySellIndicator = buySellIndicator;
            this.BaseCurCode = baseCurCode;
            this.BaseCurAmt = baseCurAmt;
            this.ContraCurAmt = contraCurAmt;
        }

        /// <summary>
        /// Gets or Sets BuySellIndicator
        /// </summary>
        [DataMember(Name = "BuySellIndicator", EmitDefaultValue = false)]
        public Object BuySellIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurCode
        /// </summary>
        [DataMember(Name = "BaseCurCode", EmitDefaultValue = false)]
        public RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInnerBaseCurCode BaseCurCode { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurAmt
        /// </summary>
        [DataMember(Name = "BaseCurAmt", EmitDefaultValue = false)]
        public double BaseCurAmt { get; set; }

        /// <summary>
        /// Gets or Sets ContraCurAmt
        /// </summary>
        [DataMember(Name = "ContraCurAmt", EmitDefaultValue = false)]
        public double ContraCurAmt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemitAddRequestRemitAddRqRemitInfoForExDealRefForExDealInfoForExQuoteRefForExQuoteInfoInner {\n");
            sb.Append("  BuySellIndicator: ").Append(BuySellIndicator).Append("\n");
            sb.Append("  BaseCurCode: ").Append(BaseCurCode).Append("\n");
            sb.Append("  BaseCurAmt: ").Append(BaseCurAmt).Append("\n");
            sb.Append("  ContraCurAmt: ").Append(ContraCurAmt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BaseCurAmt (double) minimum
            if (this.BaseCurAmt < (double)0)
            {
                yield return new ValidationResult("Invalid value for BaseCurAmt, must be a value greater than or equal to 0.", new [] { "BaseCurAmt" });
            }

            // ContraCurAmt (double) minimum
            if (this.ContraCurAmt < (double)0)
            {
                yield return new ValidationResult("Invalid value for ContraCurAmt, must be a value greater than or equal to 0.", new [] { "ContraCurAmt" });
            }

            yield break;
        }
    }

}
